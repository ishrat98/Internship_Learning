export declare const resolvers: {
    Query: {
        totalPlayers(): Promise<number>;
        elements(): Promise<{
            [k: string]: any;
            chanceOfPlayingNextRound?: number;
            chanceOfPlayingThisRound?: number;
            code?: number;
            costChangeEvent?: number;
            costChangeEventFall?: number;
            costChangeStart?: number;
            costChangeStartFall?: number;
            dreamteamCount?: number;
            elementType?: number;
            epNext?: string;
            epThis?: string;
            eventPoints?: number;
            firstName?: string;
            form?: string;
            id?: number;
            inDreamteam?: boolean;
            news?: string;
            newsAdded?: string;
            nowCost?: number;
            photo?: string;
            pointsPerGame?: string;
            secondName?: string;
            selectedByPercent?: string;
            special?: boolean;
            squadNumber?: null;
            status?: string;
            team?: number;
            teamCode?: number;
            totalPoints?: number;
            transfersIn?: number;
            transfersInEvent?: number;
            transfersOut?: number;
            transfersOutEvent?: number;
            valueForm?: string;
            valueSeason?: string;
            webName?: string;
            minutes?: number;
            goalsScored?: number;
            assists?: number;
            cleanSheets?: number;
            goalsConceded?: number;
            ownGoals?: number;
            penaltiesSaved?: number;
            penaltiesMissed?: number;
            yellowCards?: number;
            redCards?: number;
            saves?: number;
            bonus?: number;
            bps?: number;
            influence?: string;
            creativity?: string;
            threat?: string;
            ictIndex?: string;
        }[]>;
        events(): Promise<{
            elements: {
                [k: string]: any;
                id?: number;
                stats?: {
                    [k: string]: any;
                    minutes?: number;
                    goalsScored?: number;
                    assists?: number;
                    cleanSheets?: number;
                    goalsConceded?: number;
                    ownGoals?: number;
                    penaltiesSaved?: number;
                    penaltiesMissed?: number;
                    yellowCards?: number;
                    redCards?: number;
                    saves?: number;
                    bonus?: number;
                    bps?: number;
                    influence?: string;
                    creativity?: string;
                    threat?: string;
                    ictIndex?: string;
                    totalPoints?: number;
                    inDreamteam?: boolean;
                };
                explain?: {
                    [k: string]: any;
                    fixture?: number;
                    stats?: {
                        [k: string]: any;
                        identifier?: string;
                        points?: number;
                        value?: number;
                    }[];
                }[];
            }[];
            id?: number;
            name?: string;
            deadlineTime?: string;
            averageEntryScore?: number;
            finished?: boolean;
            dataChecked?: boolean;
            highestScoringEntry?: number;
            deadlineTimeEpoch?: number;
            deadlineTimeGameOffset?: number;
            highestScore?: number;
            isPrevious?: boolean;
            isCurrent?: boolean;
            isNext?: boolean;
            chipPlays?: {
                [k: string]: any;
                chipName?: string;
                numPlayed?: number;
            }[];
            mostSelected?: number;
            mostTransferredIn?: number;
            topElement?: number;
            topElementInfo?: {
                [k: string]: any;
                id?: number;
                points?: number;
            };
            transfersMade?: number;
            mostCaptained?: number;
            mostViceCaptained?: number;
        }[]>;
        entry(obj: any, args: {
            id: number;
        }, context: any): Promise<import("..").Entry>;
    };
    Entry: {
        history(obj: any, args: any, context: any): Promise<{
            chips: {
                [k: string]: any;
                name?: string;
                time?: string;
                event?: number;
            }[];
            current: {
                picks: {
                    elementType: number;
                    stats: {
                        [k: string]: any;
                        minutes?: number;
                        goalsScored?: number;
                        assists?: number;
                        cleanSheets?: number;
                        goalsConceded?: number;
                        ownGoals?: number;
                        penaltiesSaved?: number;
                        penaltiesMissed?: number;
                        yellowCards?: number;
                        redCards?: number;
                        saves?: number;
                        bonus?: number;
                        bps?: number;
                        influence?: string;
                        creativity?: string;
                        threat?: string;
                        ictIndex?: string;
                        totalPoints?: number;
                        inDreamteam?: boolean;
                    };
                    element?: number;
                    position?: number;
                    multiplier?: number;
                    isCaptain?: boolean;
                    isViceCaptain?: boolean;
                }[];
                event?: number;
                points?: number;
                totalPoints?: number;
                rank?: number;
                rankSort?: number;
                overallRank?: number;
                bank?: number;
                value?: number;
                eventTransfers?: number;
                eventTransfersCost?: number;
                pointsOnBench?: number;
            }[];
            past: {
                [k: string]: any;
                seasonName?: string;
                totalPoints?: number;
                rank?: number;
            }[];
        }>;
    };
};
