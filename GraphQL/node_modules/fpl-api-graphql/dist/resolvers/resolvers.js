"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const dataloaders_1 = require("./dataloaders");
exports.resolvers = {
    Query: {
        /*
        async bootstrap() {
          return bootstrapLoader();
        },*/
        async totalPlayers() {
            const bootstrap = await dataloaders_1.bootstrapLoader();
            return bootstrap.totalPlayers;
        },
        async elements() {
            const bootstrap = await dataloaders_1.bootstrapLoader();
            return bootstrap.elements;
        },
        async events() {
            const bootstrap = await dataloaders_1.bootstrapLoader();
            const events = bootstrap.events;
            const finishedEvents = events.filter(event => event.finished);
            const finishedIds = finishedEvents.map(event => event.id);
            const elements = await dataloaders_1.eventLiveLoaderMany(finishedIds);
            const result = events.map((event, index) => {
                return Object.assign({}, event, (elements[index] && { elements: elements[index].elements }));
            });
            return result;
        },
        async entry(obj, args, context) {
            return dataloaders_1.entryLoader(args.id);
        },
    },
    Entry: {
        async history(obj, args, context) {
            const setup = await Promise.all([
                dataloaders_1.bootstrapLoader(),
                dataloaders_1.entryHistoryLoader(obj.id),
            ]);
            const elements = setup[0].elements;
            const history = setup[1];
            const picks = await Promise.all(history.current.map(event => {
                return Promise.all([
                    dataloaders_1.eventLiveLoader(event.event),
                    dataloaders_1.entryPicksLoader(obj.id, event.event),
                ]).then(([eventLive, entryPicks]) => {
                    return entryPicks.picks.map(pick => {
                        const matchedElement = elements.find(element => element.id === pick.element);
                        const matchedLiveElement = eventLive.elements.find(element => element.id === pick.element);
                        return Object.assign({}, pick, { elementType: matchedElement.elementType, stats: matchedLiveElement.stats });
                    });
                });
            }));
            return {
                chips: history.chips,
                current: history.current.map((currentHistory, index) => {
                    return Object.assign({}, currentHistory, { picks: picks[index] });
                }),
                past: history.past,
            };
        },
    },
};
